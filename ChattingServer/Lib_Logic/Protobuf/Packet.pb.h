// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Packet.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Packet_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Packet_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Packet_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Packet_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[16]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Packet_2eproto;
namespace lsbProto {
class Echo;
class EchoDefaultTypeInternal;
extern EchoDefaultTypeInternal _Echo_default_instance_;
class LoginReq;
class LoginReqDefaultTypeInternal;
extern LoginReqDefaultTypeInternal _LoginReq_default_instance_;
class LoginRes;
class LoginResDefaultTypeInternal;
extern LoginResDefaultTypeInternal _LoginRes_default_instance_;
class LogoutReq;
class LogoutReqDefaultTypeInternal;
extern LogoutReqDefaultTypeInternal _LogoutReq_default_instance_;
class LogoutRes;
class LogoutResDefaultTypeInternal;
extern LogoutResDefaultTypeInternal _LogoutRes_default_instance_;
class RoomChatNtf;
class RoomChatNtfDefaultTypeInternal;
extern RoomChatNtfDefaultTypeInternal _RoomChatNtf_default_instance_;
class RoomChatReq;
class RoomChatReqDefaultTypeInternal;
extern RoomChatReqDefaultTypeInternal _RoomChatReq_default_instance_;
class RoomChatRes;
class RoomChatResDefaultTypeInternal;
extern RoomChatResDefaultTypeInternal _RoomChatRes_default_instance_;
class RoomEnterNtf;
class RoomEnterNtfDefaultTypeInternal;
extern RoomEnterNtfDefaultTypeInternal _RoomEnterNtf_default_instance_;
class RoomEnterReq;
class RoomEnterReqDefaultTypeInternal;
extern RoomEnterReqDefaultTypeInternal _RoomEnterReq_default_instance_;
class RoomEnterRes;
class RoomEnterResDefaultTypeInternal;
extern RoomEnterResDefaultTypeInternal _RoomEnterRes_default_instance_;
class RoomLeaveNtf;
class RoomLeaveNtfDefaultTypeInternal;
extern RoomLeaveNtfDefaultTypeInternal _RoomLeaveNtf_default_instance_;
class RoomLeaveReq;
class RoomLeaveReqDefaultTypeInternal;
extern RoomLeaveReqDefaultTypeInternal _RoomLeaveReq_default_instance_;
class RoomLeaveRes;
class RoomLeaveResDefaultTypeInternal;
extern RoomLeaveResDefaultTypeInternal _RoomLeaveRes_default_instance_;
class RoomUserListNtf;
class RoomUserListNtfDefaultTypeInternal;
extern RoomUserListNtfDefaultTypeInternal _RoomUserListNtf_default_instance_;
class UserInfo;
class UserInfoDefaultTypeInternal;
extern UserInfoDefaultTypeInternal _UserInfo_default_instance_;
}  // namespace lsbProto
PROTOBUF_NAMESPACE_OPEN
template<> ::lsbProto::Echo* Arena::CreateMaybeMessage<::lsbProto::Echo>(Arena*);
template<> ::lsbProto::LoginReq* Arena::CreateMaybeMessage<::lsbProto::LoginReq>(Arena*);
template<> ::lsbProto::LoginRes* Arena::CreateMaybeMessage<::lsbProto::LoginRes>(Arena*);
template<> ::lsbProto::LogoutReq* Arena::CreateMaybeMessage<::lsbProto::LogoutReq>(Arena*);
template<> ::lsbProto::LogoutRes* Arena::CreateMaybeMessage<::lsbProto::LogoutRes>(Arena*);
template<> ::lsbProto::RoomChatNtf* Arena::CreateMaybeMessage<::lsbProto::RoomChatNtf>(Arena*);
template<> ::lsbProto::RoomChatReq* Arena::CreateMaybeMessage<::lsbProto::RoomChatReq>(Arena*);
template<> ::lsbProto::RoomChatRes* Arena::CreateMaybeMessage<::lsbProto::RoomChatRes>(Arena*);
template<> ::lsbProto::RoomEnterNtf* Arena::CreateMaybeMessage<::lsbProto::RoomEnterNtf>(Arena*);
template<> ::lsbProto::RoomEnterReq* Arena::CreateMaybeMessage<::lsbProto::RoomEnterReq>(Arena*);
template<> ::lsbProto::RoomEnterRes* Arena::CreateMaybeMessage<::lsbProto::RoomEnterRes>(Arena*);
template<> ::lsbProto::RoomLeaveNtf* Arena::CreateMaybeMessage<::lsbProto::RoomLeaveNtf>(Arena*);
template<> ::lsbProto::RoomLeaveReq* Arena::CreateMaybeMessage<::lsbProto::RoomLeaveReq>(Arena*);
template<> ::lsbProto::RoomLeaveRes* Arena::CreateMaybeMessage<::lsbProto::RoomLeaveRes>(Arena*);
template<> ::lsbProto::RoomUserListNtf* Arena::CreateMaybeMessage<::lsbProto::RoomUserListNtf>(Arena*);
template<> ::lsbProto::UserInfo* Arena::CreateMaybeMessage<::lsbProto::UserInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace lsbProto {

// ===================================================================

class Echo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lsbProto.Echo) */ {
 public:
  Echo();
  virtual ~Echo();

  Echo(const Echo& from);
  Echo(Echo&& from) noexcept
    : Echo() {
    *this = ::std::move(from);
  }

  inline Echo& operator=(const Echo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Echo& operator=(Echo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Echo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Echo* internal_default_instance() {
    return reinterpret_cast<const Echo*>(
               &_Echo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Echo& a, Echo& b) {
    a.Swap(&b);
  }
  inline void Swap(Echo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Echo* New() const final {
    return CreateMaybeMessage<Echo>(nullptr);
  }

  Echo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Echo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Echo& from);
  void MergeFrom(const Echo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Echo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lsbProto.Echo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Packet_2eproto);
    return ::descriptor_table_Packet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
  };
  // string msg = 1;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:lsbProto.Echo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Packet_2eproto;
};
// -------------------------------------------------------------------

class LoginReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lsbProto.LoginReq) */ {
 public:
  LoginReq();
  virtual ~LoginReq();

  LoginReq(const LoginReq& from);
  LoginReq(LoginReq&& from) noexcept
    : LoginReq() {
    *this = ::std::move(from);
  }

  inline LoginReq& operator=(const LoginReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginReq& operator=(LoginReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginReq* internal_default_instance() {
    return reinterpret_cast<const LoginReq*>(
               &_LoginReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LoginReq& a, LoginReq& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginReq* New() const final {
    return CreateMaybeMessage<LoginReq>(nullptr);
  }

  LoginReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginReq& from);
  void MergeFrom(const LoginReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lsbProto.LoginReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Packet_2eproto);
    return ::descriptor_table_Packet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPwFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // string pw = 2;
  void clear_pw();
  const std::string& pw() const;
  void set_pw(const std::string& value);
  void set_pw(std::string&& value);
  void set_pw(const char* value);
  void set_pw(const char* value, size_t size);
  std::string* mutable_pw();
  std::string* release_pw();
  void set_allocated_pw(std::string* pw);

  // @@protoc_insertion_point(class_scope:lsbProto.LoginReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Packet_2eproto;
};
// -------------------------------------------------------------------

class LoginRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lsbProto.LoginRes) */ {
 public:
  LoginRes();
  virtual ~LoginRes();

  LoginRes(const LoginRes& from);
  LoginRes(LoginRes&& from) noexcept
    : LoginRes() {
    *this = ::std::move(from);
  }

  inline LoginRes& operator=(const LoginRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginRes& operator=(LoginRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginRes* internal_default_instance() {
    return reinterpret_cast<const LoginRes*>(
               &_LoginRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LoginRes& a, LoginRes& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginRes* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginRes* New() const final {
    return CreateMaybeMessage<LoginRes>(nullptr);
  }

  LoginRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginRes& from);
  void MergeFrom(const LoginRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lsbProto.LoginRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Packet_2eproto);
    return ::descriptor_table_Packet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResFieldNumber = 1,
  };
  // int32 res = 1;
  void clear_res();
  ::PROTOBUF_NAMESPACE_ID::int32 res() const;
  void set_res(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:lsbProto.LoginRes)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 res_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Packet_2eproto;
};
// -------------------------------------------------------------------

class LogoutReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lsbProto.LogoutReq) */ {
 public:
  LogoutReq();
  virtual ~LogoutReq();

  LogoutReq(const LogoutReq& from);
  LogoutReq(LogoutReq&& from) noexcept
    : LogoutReq() {
    *this = ::std::move(from);
  }

  inline LogoutReq& operator=(const LogoutReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogoutReq& operator=(LogoutReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogoutReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogoutReq* internal_default_instance() {
    return reinterpret_cast<const LogoutReq*>(
               &_LogoutReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LogoutReq& a, LogoutReq& b) {
    a.Swap(&b);
  }
  inline void Swap(LogoutReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogoutReq* New() const final {
    return CreateMaybeMessage<LogoutReq>(nullptr);
  }

  LogoutReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogoutReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogoutReq& from);
  void MergeFrom(const LogoutReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogoutReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lsbProto.LogoutReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Packet_2eproto);
    return ::descriptor_table_Packet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:lsbProto.LogoutReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Packet_2eproto;
};
// -------------------------------------------------------------------

class LogoutRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lsbProto.LogoutRes) */ {
 public:
  LogoutRes();
  virtual ~LogoutRes();

  LogoutRes(const LogoutRes& from);
  LogoutRes(LogoutRes&& from) noexcept
    : LogoutRes() {
    *this = ::std::move(from);
  }

  inline LogoutRes& operator=(const LogoutRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogoutRes& operator=(LogoutRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogoutRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogoutRes* internal_default_instance() {
    return reinterpret_cast<const LogoutRes*>(
               &_LogoutRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LogoutRes& a, LogoutRes& b) {
    a.Swap(&b);
  }
  inline void Swap(LogoutRes* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogoutRes* New() const final {
    return CreateMaybeMessage<LogoutRes>(nullptr);
  }

  LogoutRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogoutRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogoutRes& from);
  void MergeFrom(const LogoutRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogoutRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lsbProto.LogoutRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Packet_2eproto);
    return ::descriptor_table_Packet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResFieldNumber = 1,
  };
  // int32 res = 1;
  void clear_res();
  ::PROTOBUF_NAMESPACE_ID::int32 res() const;
  void set_res(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:lsbProto.LogoutRes)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 res_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Packet_2eproto;
};
// -------------------------------------------------------------------

class UserInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lsbProto.UserInfo) */ {
 public:
  UserInfo();
  virtual ~UserInfo();

  UserInfo(const UserInfo& from);
  UserInfo(UserInfo&& from) noexcept
    : UserInfo() {
    *this = ::std::move(from);
  }

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfo& operator=(UserInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserInfo* internal_default_instance() {
    return reinterpret_cast<const UserInfo*>(
               &_UserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UserInfo& a, UserInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserInfo* New() const final {
    return CreateMaybeMessage<UserInfo>(nullptr);
  }

  UserInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserInfo& from);
  void MergeFrom(const UserInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lsbProto.UserInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Packet_2eproto);
    return ::descriptor_table_Packet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 2,
    kIndexFieldNumber = 1,
  };
  // string id = 2;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // int32 index = 1;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:lsbProto.UserInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Packet_2eproto;
};
// -------------------------------------------------------------------

class RoomEnterReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lsbProto.RoomEnterReq) */ {
 public:
  RoomEnterReq();
  virtual ~RoomEnterReq();

  RoomEnterReq(const RoomEnterReq& from);
  RoomEnterReq(RoomEnterReq&& from) noexcept
    : RoomEnterReq() {
    *this = ::std::move(from);
  }

  inline RoomEnterReq& operator=(const RoomEnterReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomEnterReq& operator=(RoomEnterReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoomEnterReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoomEnterReq* internal_default_instance() {
    return reinterpret_cast<const RoomEnterReq*>(
               &_RoomEnterReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RoomEnterReq& a, RoomEnterReq& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomEnterReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoomEnterReq* New() const final {
    return CreateMaybeMessage<RoomEnterReq>(nullptr);
  }

  RoomEnterReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoomEnterReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoomEnterReq& from);
  void MergeFrom(const RoomEnterReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomEnterReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lsbProto.RoomEnterReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Packet_2eproto);
    return ::descriptor_table_Packet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomTitleFieldNumber = 3,
    kIsCreateFieldNumber = 1,
    kRoomIndexFieldNumber = 2,
  };
  // string roomTitle = 3;
  void clear_roomtitle();
  const std::string& roomtitle() const;
  void set_roomtitle(const std::string& value);
  void set_roomtitle(std::string&& value);
  void set_roomtitle(const char* value);
  void set_roomtitle(const char* value, size_t size);
  std::string* mutable_roomtitle();
  std::string* release_roomtitle();
  void set_allocated_roomtitle(std::string* roomtitle);

  // bool isCreate = 1;
  void clear_iscreate();
  bool iscreate() const;
  void set_iscreate(bool value);

  // int32 roomIndex = 2;
  void clear_roomindex();
  ::PROTOBUF_NAMESPACE_ID::int32 roomindex() const;
  void set_roomindex(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:lsbProto.RoomEnterReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomtitle_;
  bool iscreate_;
  ::PROTOBUF_NAMESPACE_ID::int32 roomindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Packet_2eproto;
};
// -------------------------------------------------------------------

class RoomEnterRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lsbProto.RoomEnterRes) */ {
 public:
  RoomEnterRes();
  virtual ~RoomEnterRes();

  RoomEnterRes(const RoomEnterRes& from);
  RoomEnterRes(RoomEnterRes&& from) noexcept
    : RoomEnterRes() {
    *this = ::std::move(from);
  }

  inline RoomEnterRes& operator=(const RoomEnterRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomEnterRes& operator=(RoomEnterRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoomEnterRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoomEnterRes* internal_default_instance() {
    return reinterpret_cast<const RoomEnterRes*>(
               &_RoomEnterRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RoomEnterRes& a, RoomEnterRes& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomEnterRes* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoomEnterRes* New() const final {
    return CreateMaybeMessage<RoomEnterRes>(nullptr);
  }

  RoomEnterRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoomEnterRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoomEnterRes& from);
  void MergeFrom(const RoomEnterRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomEnterRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lsbProto.RoomEnterRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Packet_2eproto);
    return ::descriptor_table_Packet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomTitleFieldNumber = 3,
    kResFieldNumber = 1,
    kRoomIndexFieldNumber = 2,
  };
  // string roomTitle = 3;
  void clear_roomtitle();
  const std::string& roomtitle() const;
  void set_roomtitle(const std::string& value);
  void set_roomtitle(std::string&& value);
  void set_roomtitle(const char* value);
  void set_roomtitle(const char* value, size_t size);
  std::string* mutable_roomtitle();
  std::string* release_roomtitle();
  void set_allocated_roomtitle(std::string* roomtitle);

  // int32 res = 1;
  void clear_res();
  ::PROTOBUF_NAMESPACE_ID::int32 res() const;
  void set_res(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 roomIndex = 2;
  void clear_roomindex();
  ::PROTOBUF_NAMESPACE_ID::int32 roomindex() const;
  void set_roomindex(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:lsbProto.RoomEnterRes)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomtitle_;
  ::PROTOBUF_NAMESPACE_ID::int32 res_;
  ::PROTOBUF_NAMESPACE_ID::int32 roomindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Packet_2eproto;
};
// -------------------------------------------------------------------

class RoomEnterNtf :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lsbProto.RoomEnterNtf) */ {
 public:
  RoomEnterNtf();
  virtual ~RoomEnterNtf();

  RoomEnterNtf(const RoomEnterNtf& from);
  RoomEnterNtf(RoomEnterNtf&& from) noexcept
    : RoomEnterNtf() {
    *this = ::std::move(from);
  }

  inline RoomEnterNtf& operator=(const RoomEnterNtf& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomEnterNtf& operator=(RoomEnterNtf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoomEnterNtf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoomEnterNtf* internal_default_instance() {
    return reinterpret_cast<const RoomEnterNtf*>(
               &_RoomEnterNtf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RoomEnterNtf& a, RoomEnterNtf& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomEnterNtf* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoomEnterNtf* New() const final {
    return CreateMaybeMessage<RoomEnterNtf>(nullptr);
  }

  RoomEnterNtf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoomEnterNtf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoomEnterNtf& from);
  void MergeFrom(const RoomEnterNtf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomEnterNtf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lsbProto.RoomEnterNtf";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Packet_2eproto);
    return ::descriptor_table_Packet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
  };
  // .lsbProto.UserInfo user = 1;
  bool has_user() const;
  void clear_user();
  const ::lsbProto::UserInfo& user() const;
  ::lsbProto::UserInfo* release_user();
  ::lsbProto::UserInfo* mutable_user();
  void set_allocated_user(::lsbProto::UserInfo* user);

  // @@protoc_insertion_point(class_scope:lsbProto.RoomEnterNtf)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::lsbProto::UserInfo* user_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Packet_2eproto;
};
// -------------------------------------------------------------------

class RoomUserListNtf :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lsbProto.RoomUserListNtf) */ {
 public:
  RoomUserListNtf();
  virtual ~RoomUserListNtf();

  RoomUserListNtf(const RoomUserListNtf& from);
  RoomUserListNtf(RoomUserListNtf&& from) noexcept
    : RoomUserListNtf() {
    *this = ::std::move(from);
  }

  inline RoomUserListNtf& operator=(const RoomUserListNtf& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomUserListNtf& operator=(RoomUserListNtf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoomUserListNtf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoomUserListNtf* internal_default_instance() {
    return reinterpret_cast<const RoomUserListNtf*>(
               &_RoomUserListNtf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(RoomUserListNtf& a, RoomUserListNtf& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomUserListNtf* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoomUserListNtf* New() const final {
    return CreateMaybeMessage<RoomUserListNtf>(nullptr);
  }

  RoomUserListNtf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoomUserListNtf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoomUserListNtf& from);
  void MergeFrom(const RoomUserListNtf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomUserListNtf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lsbProto.RoomUserListNtf";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Packet_2eproto);
    return ::descriptor_table_Packet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
  };
  // repeated .lsbProto.UserInfo user = 1;
  int user_size() const;
  void clear_user();
  ::lsbProto::UserInfo* mutable_user(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lsbProto::UserInfo >*
      mutable_user();
  const ::lsbProto::UserInfo& user(int index) const;
  ::lsbProto::UserInfo* add_user();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lsbProto::UserInfo >&
      user() const;

  // @@protoc_insertion_point(class_scope:lsbProto.RoomUserListNtf)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lsbProto::UserInfo > user_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Packet_2eproto;
};
// -------------------------------------------------------------------

class RoomLeaveReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lsbProto.RoomLeaveReq) */ {
 public:
  RoomLeaveReq();
  virtual ~RoomLeaveReq();

  RoomLeaveReq(const RoomLeaveReq& from);
  RoomLeaveReq(RoomLeaveReq&& from) noexcept
    : RoomLeaveReq() {
    *this = ::std::move(from);
  }

  inline RoomLeaveReq& operator=(const RoomLeaveReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomLeaveReq& operator=(RoomLeaveReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoomLeaveReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoomLeaveReq* internal_default_instance() {
    return reinterpret_cast<const RoomLeaveReq*>(
               &_RoomLeaveReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(RoomLeaveReq& a, RoomLeaveReq& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomLeaveReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoomLeaveReq* New() const final {
    return CreateMaybeMessage<RoomLeaveReq>(nullptr);
  }

  RoomLeaveReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoomLeaveReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoomLeaveReq& from);
  void MergeFrom(const RoomLeaveReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomLeaveReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lsbProto.RoomLeaveReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Packet_2eproto);
    return ::descriptor_table_Packet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:lsbProto.RoomLeaveReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Packet_2eproto;
};
// -------------------------------------------------------------------

class RoomLeaveRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lsbProto.RoomLeaveRes) */ {
 public:
  RoomLeaveRes();
  virtual ~RoomLeaveRes();

  RoomLeaveRes(const RoomLeaveRes& from);
  RoomLeaveRes(RoomLeaveRes&& from) noexcept
    : RoomLeaveRes() {
    *this = ::std::move(from);
  }

  inline RoomLeaveRes& operator=(const RoomLeaveRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomLeaveRes& operator=(RoomLeaveRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoomLeaveRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoomLeaveRes* internal_default_instance() {
    return reinterpret_cast<const RoomLeaveRes*>(
               &_RoomLeaveRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(RoomLeaveRes& a, RoomLeaveRes& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomLeaveRes* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoomLeaveRes* New() const final {
    return CreateMaybeMessage<RoomLeaveRes>(nullptr);
  }

  RoomLeaveRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoomLeaveRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoomLeaveRes& from);
  void MergeFrom(const RoomLeaveRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomLeaveRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lsbProto.RoomLeaveRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Packet_2eproto);
    return ::descriptor_table_Packet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResFieldNumber = 1,
  };
  // int32 res = 1;
  void clear_res();
  ::PROTOBUF_NAMESPACE_ID::int32 res() const;
  void set_res(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:lsbProto.RoomLeaveRes)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 res_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Packet_2eproto;
};
// -------------------------------------------------------------------

class RoomLeaveNtf :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lsbProto.RoomLeaveNtf) */ {
 public:
  RoomLeaveNtf();
  virtual ~RoomLeaveNtf();

  RoomLeaveNtf(const RoomLeaveNtf& from);
  RoomLeaveNtf(RoomLeaveNtf&& from) noexcept
    : RoomLeaveNtf() {
    *this = ::std::move(from);
  }

  inline RoomLeaveNtf& operator=(const RoomLeaveNtf& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomLeaveNtf& operator=(RoomLeaveNtf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoomLeaveNtf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoomLeaveNtf* internal_default_instance() {
    return reinterpret_cast<const RoomLeaveNtf*>(
               &_RoomLeaveNtf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(RoomLeaveNtf& a, RoomLeaveNtf& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomLeaveNtf* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoomLeaveNtf* New() const final {
    return CreateMaybeMessage<RoomLeaveNtf>(nullptr);
  }

  RoomLeaveNtf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoomLeaveNtf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoomLeaveNtf& from);
  void MergeFrom(const RoomLeaveNtf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomLeaveNtf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lsbProto.RoomLeaveNtf";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Packet_2eproto);
    return ::descriptor_table_Packet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIndexFieldNumber = 1,
  };
  // int32 userIndex = 1;
  void clear_userindex();
  ::PROTOBUF_NAMESPACE_ID::int32 userindex() const;
  void set_userindex(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:lsbProto.RoomLeaveNtf)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 userindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Packet_2eproto;
};
// -------------------------------------------------------------------

class RoomChatReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lsbProto.RoomChatReq) */ {
 public:
  RoomChatReq();
  virtual ~RoomChatReq();

  RoomChatReq(const RoomChatReq& from);
  RoomChatReq(RoomChatReq&& from) noexcept
    : RoomChatReq() {
    *this = ::std::move(from);
  }

  inline RoomChatReq& operator=(const RoomChatReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomChatReq& operator=(RoomChatReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoomChatReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoomChatReq* internal_default_instance() {
    return reinterpret_cast<const RoomChatReq*>(
               &_RoomChatReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(RoomChatReq& a, RoomChatReq& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomChatReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoomChatReq* New() const final {
    return CreateMaybeMessage<RoomChatReq>(nullptr);
  }

  RoomChatReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoomChatReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoomChatReq& from);
  void MergeFrom(const RoomChatReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomChatReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lsbProto.RoomChatReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Packet_2eproto);
    return ::descriptor_table_Packet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
  };
  // string msg = 1;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:lsbProto.RoomChatReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Packet_2eproto;
};
// -------------------------------------------------------------------

class RoomChatRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lsbProto.RoomChatRes) */ {
 public:
  RoomChatRes();
  virtual ~RoomChatRes();

  RoomChatRes(const RoomChatRes& from);
  RoomChatRes(RoomChatRes&& from) noexcept
    : RoomChatRes() {
    *this = ::std::move(from);
  }

  inline RoomChatRes& operator=(const RoomChatRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomChatRes& operator=(RoomChatRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoomChatRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoomChatRes* internal_default_instance() {
    return reinterpret_cast<const RoomChatRes*>(
               &_RoomChatRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(RoomChatRes& a, RoomChatRes& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomChatRes* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoomChatRes* New() const final {
    return CreateMaybeMessage<RoomChatRes>(nullptr);
  }

  RoomChatRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoomChatRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoomChatRes& from);
  void MergeFrom(const RoomChatRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomChatRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lsbProto.RoomChatRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Packet_2eproto);
    return ::descriptor_table_Packet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResFieldNumber = 1,
  };
  // int32 res = 1;
  void clear_res();
  ::PROTOBUF_NAMESPACE_ID::int32 res() const;
  void set_res(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:lsbProto.RoomChatRes)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 res_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Packet_2eproto;
};
// -------------------------------------------------------------------

class RoomChatNtf :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lsbProto.RoomChatNtf) */ {
 public:
  RoomChatNtf();
  virtual ~RoomChatNtf();

  RoomChatNtf(const RoomChatNtf& from);
  RoomChatNtf(RoomChatNtf&& from) noexcept
    : RoomChatNtf() {
    *this = ::std::move(from);
  }

  inline RoomChatNtf& operator=(const RoomChatNtf& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomChatNtf& operator=(RoomChatNtf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoomChatNtf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoomChatNtf* internal_default_instance() {
    return reinterpret_cast<const RoomChatNtf*>(
               &_RoomChatNtf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(RoomChatNtf& a, RoomChatNtf& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomChatNtf* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoomChatNtf* New() const final {
    return CreateMaybeMessage<RoomChatNtf>(nullptr);
  }

  RoomChatNtf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoomChatNtf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoomChatNtf& from);
  void MergeFrom(const RoomChatNtf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomChatNtf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lsbProto.RoomChatNtf";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Packet_2eproto);
    return ::descriptor_table_Packet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kUserIndexFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // int32 userIndex = 1;
  void clear_userindex();
  ::PROTOBUF_NAMESPACE_ID::int32 userindex() const;
  void set_userindex(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:lsbProto.RoomChatNtf)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 userindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Packet_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Echo

// string msg = 1;
inline void Echo::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Echo::msg() const {
  // @@protoc_insertion_point(field_get:lsbProto.Echo.msg)
  return msg_.GetNoArena();
}
inline void Echo::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lsbProto.Echo.msg)
}
inline void Echo::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lsbProto.Echo.msg)
}
inline void Echo::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lsbProto.Echo.msg)
}
inline void Echo::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lsbProto.Echo.msg)
}
inline std::string* Echo::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:lsbProto.Echo.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Echo::release_msg() {
  // @@protoc_insertion_point(field_release:lsbProto.Echo.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Echo::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:lsbProto.Echo.msg)
}

// -------------------------------------------------------------------

// LoginReq

// string id = 1;
inline void LoginReq::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginReq::id() const {
  // @@protoc_insertion_point(field_get:lsbProto.LoginReq.id)
  return id_.GetNoArena();
}
inline void LoginReq::set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lsbProto.LoginReq.id)
}
inline void LoginReq::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lsbProto.LoginReq.id)
}
inline void LoginReq::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lsbProto.LoginReq.id)
}
inline void LoginReq::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lsbProto.LoginReq.id)
}
inline std::string* LoginReq::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:lsbProto.LoginReq.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginReq::release_id() {
  // @@protoc_insertion_point(field_release:lsbProto.LoginReq.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginReq::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:lsbProto.LoginReq.id)
}

// string pw = 2;
inline void LoginReq::clear_pw() {
  pw_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginReq::pw() const {
  // @@protoc_insertion_point(field_get:lsbProto.LoginReq.pw)
  return pw_.GetNoArena();
}
inline void LoginReq::set_pw(const std::string& value) {
  
  pw_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lsbProto.LoginReq.pw)
}
inline void LoginReq::set_pw(std::string&& value) {
  
  pw_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lsbProto.LoginReq.pw)
}
inline void LoginReq::set_pw(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pw_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lsbProto.LoginReq.pw)
}
inline void LoginReq::set_pw(const char* value, size_t size) {
  
  pw_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lsbProto.LoginReq.pw)
}
inline std::string* LoginReq::mutable_pw() {
  
  // @@protoc_insertion_point(field_mutable:lsbProto.LoginReq.pw)
  return pw_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginReq::release_pw() {
  // @@protoc_insertion_point(field_release:lsbProto.LoginReq.pw)
  
  return pw_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginReq::set_allocated_pw(std::string* pw) {
  if (pw != nullptr) {
    
  } else {
    
  }
  pw_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pw);
  // @@protoc_insertion_point(field_set_allocated:lsbProto.LoginReq.pw)
}

// -------------------------------------------------------------------

// LoginRes

// int32 res = 1;
inline void LoginRes::clear_res() {
  res_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginRes::res() const {
  // @@protoc_insertion_point(field_get:lsbProto.LoginRes.res)
  return res_;
}
inline void LoginRes::set_res(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  res_ = value;
  // @@protoc_insertion_point(field_set:lsbProto.LoginRes.res)
}

// -------------------------------------------------------------------

// LogoutReq

// -------------------------------------------------------------------

// LogoutRes

// int32 res = 1;
inline void LogoutRes::clear_res() {
  res_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogoutRes::res() const {
  // @@protoc_insertion_point(field_get:lsbProto.LogoutRes.res)
  return res_;
}
inline void LogoutRes::set_res(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  res_ = value;
  // @@protoc_insertion_point(field_set:lsbProto.LogoutRes.res)
}

// -------------------------------------------------------------------

// UserInfo

// int32 index = 1;
inline void UserInfo::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserInfo::index() const {
  // @@protoc_insertion_point(field_get:lsbProto.UserInfo.index)
  return index_;
}
inline void UserInfo::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:lsbProto.UserInfo.index)
}

// string id = 2;
inline void UserInfo::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserInfo::id() const {
  // @@protoc_insertion_point(field_get:lsbProto.UserInfo.id)
  return id_.GetNoArena();
}
inline void UserInfo::set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lsbProto.UserInfo.id)
}
inline void UserInfo::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lsbProto.UserInfo.id)
}
inline void UserInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lsbProto.UserInfo.id)
}
inline void UserInfo::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lsbProto.UserInfo.id)
}
inline std::string* UserInfo::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:lsbProto.UserInfo.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserInfo::release_id() {
  // @@protoc_insertion_point(field_release:lsbProto.UserInfo.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:lsbProto.UserInfo.id)
}

// -------------------------------------------------------------------

// RoomEnterReq

// bool isCreate = 1;
inline void RoomEnterReq::clear_iscreate() {
  iscreate_ = false;
}
inline bool RoomEnterReq::iscreate() const {
  // @@protoc_insertion_point(field_get:lsbProto.RoomEnterReq.isCreate)
  return iscreate_;
}
inline void RoomEnterReq::set_iscreate(bool value) {
  
  iscreate_ = value;
  // @@protoc_insertion_point(field_set:lsbProto.RoomEnterReq.isCreate)
}

// int32 roomIndex = 2;
inline void RoomEnterReq::clear_roomindex() {
  roomindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoomEnterReq::roomindex() const {
  // @@protoc_insertion_point(field_get:lsbProto.RoomEnterReq.roomIndex)
  return roomindex_;
}
inline void RoomEnterReq::set_roomindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  roomindex_ = value;
  // @@protoc_insertion_point(field_set:lsbProto.RoomEnterReq.roomIndex)
}

// string roomTitle = 3;
inline void RoomEnterReq::clear_roomtitle() {
  roomtitle_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RoomEnterReq::roomtitle() const {
  // @@protoc_insertion_point(field_get:lsbProto.RoomEnterReq.roomTitle)
  return roomtitle_.GetNoArena();
}
inline void RoomEnterReq::set_roomtitle(const std::string& value) {
  
  roomtitle_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lsbProto.RoomEnterReq.roomTitle)
}
inline void RoomEnterReq::set_roomtitle(std::string&& value) {
  
  roomtitle_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lsbProto.RoomEnterReq.roomTitle)
}
inline void RoomEnterReq::set_roomtitle(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  roomtitle_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lsbProto.RoomEnterReq.roomTitle)
}
inline void RoomEnterReq::set_roomtitle(const char* value, size_t size) {
  
  roomtitle_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lsbProto.RoomEnterReq.roomTitle)
}
inline std::string* RoomEnterReq::mutable_roomtitle() {
  
  // @@protoc_insertion_point(field_mutable:lsbProto.RoomEnterReq.roomTitle)
  return roomtitle_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RoomEnterReq::release_roomtitle() {
  // @@protoc_insertion_point(field_release:lsbProto.RoomEnterReq.roomTitle)
  
  return roomtitle_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RoomEnterReq::set_allocated_roomtitle(std::string* roomtitle) {
  if (roomtitle != nullptr) {
    
  } else {
    
  }
  roomtitle_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roomtitle);
  // @@protoc_insertion_point(field_set_allocated:lsbProto.RoomEnterReq.roomTitle)
}

// -------------------------------------------------------------------

// RoomEnterRes

// int32 res = 1;
inline void RoomEnterRes::clear_res() {
  res_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoomEnterRes::res() const {
  // @@protoc_insertion_point(field_get:lsbProto.RoomEnterRes.res)
  return res_;
}
inline void RoomEnterRes::set_res(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  res_ = value;
  // @@protoc_insertion_point(field_set:lsbProto.RoomEnterRes.res)
}

// int32 roomIndex = 2;
inline void RoomEnterRes::clear_roomindex() {
  roomindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoomEnterRes::roomindex() const {
  // @@protoc_insertion_point(field_get:lsbProto.RoomEnterRes.roomIndex)
  return roomindex_;
}
inline void RoomEnterRes::set_roomindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  roomindex_ = value;
  // @@protoc_insertion_point(field_set:lsbProto.RoomEnterRes.roomIndex)
}

// string roomTitle = 3;
inline void RoomEnterRes::clear_roomtitle() {
  roomtitle_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RoomEnterRes::roomtitle() const {
  // @@protoc_insertion_point(field_get:lsbProto.RoomEnterRes.roomTitle)
  return roomtitle_.GetNoArena();
}
inline void RoomEnterRes::set_roomtitle(const std::string& value) {
  
  roomtitle_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lsbProto.RoomEnterRes.roomTitle)
}
inline void RoomEnterRes::set_roomtitle(std::string&& value) {
  
  roomtitle_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lsbProto.RoomEnterRes.roomTitle)
}
inline void RoomEnterRes::set_roomtitle(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  roomtitle_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lsbProto.RoomEnterRes.roomTitle)
}
inline void RoomEnterRes::set_roomtitle(const char* value, size_t size) {
  
  roomtitle_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lsbProto.RoomEnterRes.roomTitle)
}
inline std::string* RoomEnterRes::mutable_roomtitle() {
  
  // @@protoc_insertion_point(field_mutable:lsbProto.RoomEnterRes.roomTitle)
  return roomtitle_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RoomEnterRes::release_roomtitle() {
  // @@protoc_insertion_point(field_release:lsbProto.RoomEnterRes.roomTitle)
  
  return roomtitle_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RoomEnterRes::set_allocated_roomtitle(std::string* roomtitle) {
  if (roomtitle != nullptr) {
    
  } else {
    
  }
  roomtitle_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roomtitle);
  // @@protoc_insertion_point(field_set_allocated:lsbProto.RoomEnterRes.roomTitle)
}

// -------------------------------------------------------------------

// RoomEnterNtf

// .lsbProto.UserInfo user = 1;
inline bool RoomEnterNtf::has_user() const {
  return this != internal_default_instance() && user_ != nullptr;
}
inline void RoomEnterNtf::clear_user() {
  if (GetArenaNoVirtual() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
}
inline const ::lsbProto::UserInfo& RoomEnterNtf::user() const {
  const ::lsbProto::UserInfo* p = user_;
  // @@protoc_insertion_point(field_get:lsbProto.RoomEnterNtf.user)
  return p != nullptr ? *p : *reinterpret_cast<const ::lsbProto::UserInfo*>(
      &::lsbProto::_UserInfo_default_instance_);
}
inline ::lsbProto::UserInfo* RoomEnterNtf::release_user() {
  // @@protoc_insertion_point(field_release:lsbProto.RoomEnterNtf.user)
  
  ::lsbProto::UserInfo* temp = user_;
  user_ = nullptr;
  return temp;
}
inline ::lsbProto::UserInfo* RoomEnterNtf::mutable_user() {
  
  if (user_ == nullptr) {
    auto* p = CreateMaybeMessage<::lsbProto::UserInfo>(GetArenaNoVirtual());
    user_ = p;
  }
  // @@protoc_insertion_point(field_mutable:lsbProto.RoomEnterNtf.user)
  return user_;
}
inline void RoomEnterNtf::set_allocated_user(::lsbProto::UserInfo* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:lsbProto.RoomEnterNtf.user)
}

// -------------------------------------------------------------------

// RoomUserListNtf

// repeated .lsbProto.UserInfo user = 1;
inline int RoomUserListNtf::user_size() const {
  return user_.size();
}
inline void RoomUserListNtf::clear_user() {
  user_.Clear();
}
inline ::lsbProto::UserInfo* RoomUserListNtf::mutable_user(int index) {
  // @@protoc_insertion_point(field_mutable:lsbProto.RoomUserListNtf.user)
  return user_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lsbProto::UserInfo >*
RoomUserListNtf::mutable_user() {
  // @@protoc_insertion_point(field_mutable_list:lsbProto.RoomUserListNtf.user)
  return &user_;
}
inline const ::lsbProto::UserInfo& RoomUserListNtf::user(int index) const {
  // @@protoc_insertion_point(field_get:lsbProto.RoomUserListNtf.user)
  return user_.Get(index);
}
inline ::lsbProto::UserInfo* RoomUserListNtf::add_user() {
  // @@protoc_insertion_point(field_add:lsbProto.RoomUserListNtf.user)
  return user_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lsbProto::UserInfo >&
RoomUserListNtf::user() const {
  // @@protoc_insertion_point(field_list:lsbProto.RoomUserListNtf.user)
  return user_;
}

// -------------------------------------------------------------------

// RoomLeaveReq

// -------------------------------------------------------------------

// RoomLeaveRes

// int32 res = 1;
inline void RoomLeaveRes::clear_res() {
  res_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoomLeaveRes::res() const {
  // @@protoc_insertion_point(field_get:lsbProto.RoomLeaveRes.res)
  return res_;
}
inline void RoomLeaveRes::set_res(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  res_ = value;
  // @@protoc_insertion_point(field_set:lsbProto.RoomLeaveRes.res)
}

// -------------------------------------------------------------------

// RoomLeaveNtf

// int32 userIndex = 1;
inline void RoomLeaveNtf::clear_userindex() {
  userindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoomLeaveNtf::userindex() const {
  // @@protoc_insertion_point(field_get:lsbProto.RoomLeaveNtf.userIndex)
  return userindex_;
}
inline void RoomLeaveNtf::set_userindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  userindex_ = value;
  // @@protoc_insertion_point(field_set:lsbProto.RoomLeaveNtf.userIndex)
}

// -------------------------------------------------------------------

// RoomChatReq

// string msg = 1;
inline void RoomChatReq::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RoomChatReq::msg() const {
  // @@protoc_insertion_point(field_get:lsbProto.RoomChatReq.msg)
  return msg_.GetNoArena();
}
inline void RoomChatReq::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lsbProto.RoomChatReq.msg)
}
inline void RoomChatReq::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lsbProto.RoomChatReq.msg)
}
inline void RoomChatReq::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lsbProto.RoomChatReq.msg)
}
inline void RoomChatReq::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lsbProto.RoomChatReq.msg)
}
inline std::string* RoomChatReq::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:lsbProto.RoomChatReq.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RoomChatReq::release_msg() {
  // @@protoc_insertion_point(field_release:lsbProto.RoomChatReq.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RoomChatReq::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:lsbProto.RoomChatReq.msg)
}

// -------------------------------------------------------------------

// RoomChatRes

// int32 res = 1;
inline void RoomChatRes::clear_res() {
  res_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoomChatRes::res() const {
  // @@protoc_insertion_point(field_get:lsbProto.RoomChatRes.res)
  return res_;
}
inline void RoomChatRes::set_res(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  res_ = value;
  // @@protoc_insertion_point(field_set:lsbProto.RoomChatRes.res)
}

// -------------------------------------------------------------------

// RoomChatNtf

// int32 userIndex = 1;
inline void RoomChatNtf::clear_userindex() {
  userindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoomChatNtf::userindex() const {
  // @@protoc_insertion_point(field_get:lsbProto.RoomChatNtf.userIndex)
  return userindex_;
}
inline void RoomChatNtf::set_userindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  userindex_ = value;
  // @@protoc_insertion_point(field_set:lsbProto.RoomChatNtf.userIndex)
}

// string msg = 2;
inline void RoomChatNtf::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RoomChatNtf::msg() const {
  // @@protoc_insertion_point(field_get:lsbProto.RoomChatNtf.msg)
  return msg_.GetNoArena();
}
inline void RoomChatNtf::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lsbProto.RoomChatNtf.msg)
}
inline void RoomChatNtf::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lsbProto.RoomChatNtf.msg)
}
inline void RoomChatNtf::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lsbProto.RoomChatNtf.msg)
}
inline void RoomChatNtf::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lsbProto.RoomChatNtf.msg)
}
inline std::string* RoomChatNtf::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:lsbProto.RoomChatNtf.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RoomChatNtf::release_msg() {
  // @@protoc_insertion_point(field_release:lsbProto.RoomChatNtf.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RoomChatNtf::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:lsbProto.RoomChatNtf.msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace lsbProto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Packet_2eproto
